13d12
< 
15d13
< 
36d33
< 
76a74,79
> #If this experiment is for File_RSM (not algo or resdb)
> # If this experiment uses external applications, set the following values
> # Valid inputs: "algo", "resdb", "raft"
> # e.x. if algorand is the sending RSM then send_rsm="algo", if resdb is
> # receiving RSM, then receive_rsm="resdb"
> 
104a108,178
> ### DUMMY Exp: Equal stake RSMs of size 4; message size 100.
> # rsm1_size=(4 13 25 46)
> # rsm2_size=(4 13 25 46)
> # rsm1_fail=(0 0 0 0)
> # rsm2_fail=(0 0 0 0)
> # RSM1_Stake=(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
> # RSM2_Stake=(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
> # klist_size=(64)
> # packet_size=(100 1000000)
> # batch_size=(200000)
> # batch_creation_time=(1ms)
> # pipeline_buffer_size=(8)
> 
> ### Exp: Equal stake RSMs of size 4; message size 100.
> #rsm1_size=(4)
> #rsm2_size=(4)
> #rsm1_fail=(1)
> #rsm2_fail=(1)
> #RSM1_Stake=(1 1 1 1)
> #RSM2_Stake=(1 1 1 1)
> #packet_size=(100)
> 
> ## Exp: Equal stake RSMs of size 4; message size 100, 1000
> #rsm1_size=(4)
> #rsm2_size=(4)
> #rsm1_fail=(1)
> #rsm2_fail=(1)
> #RSM1_Stake=(1 1 1 1)
> #RSM2_Stake=(1 1 1 1)
> #klist_size=(64)
> #packet_size=(100 1000 10000 50000 100000)
> #batch_size=(26214)
> #batch_creation_time=(1ms)
> #pipeline_buffer_size=(8)
> 
> ### Exp: Equal stake RSMs of size 7; message size 1000.
> #rsm1_size=(7)
> #rsm2_size=(7)
> #rsm1_fail=(2)
> #rsm2_fail=(2)
> #RSM1_Stake=(1 1 1 1 1 1 1)
> #RSM2_Stake=(1 1 1 1 1 1 1)
> #packet_size=(1000)
> 
> ### Exp: Equal stake RSMs of various sizes; message size 100.
> #rsm1_size=(4 7 10)
> #rsm2_size=(4 7 10)
> #rsm1_fail=(1 2 3)
> #rsm2_fail=(1 2 3)
> #RSM1_Stake=(1 1 1 1 1 1 1 1 1 1)
> #RSM2_Stake=(1 1 1 1 1 1 1 1 1 1)
> #packet_size=(100)
> 
> ### Exp: Equal stake RSMs of various sizes; varying message sizes.
> #rsm1_size=(4 7 10)
> #rsm2_size=(4 7 10)
> #rsm1_fail=(1 2 3)
> #rsm2_fail=(1 2 3)
> #RSM1_Stake=(1 1 1 1 1 1 1 1 1 1)
> #RSM2_Stake=(1 1 1 1 1 1 1 1 1 1)
> #packet_size=(100 1000 10000 100000 1000000)
> 
> ### Exp: Raft and ResilientDB; message size 100.
> #rsm1_size=(4 7 10)
> #rsm2_size=(3 5 7)
> #rsm1_fail=(1 2 3)
> #rsm2_fail=(1 2 3)
> #RSM1_Stake=(1 1 1 1 1 1 1 1 1 1)
> #RSM2_Stake=(1 1 1 1 1 1 1)
> #packet_size=(100)
> 
120,122c194,214
< RSM1=(10.128.6.20 10.128.6.21 10.128.6.22 10.128.6.23)
< RSM2=(10.128.6.24 10.128.6.25 10.128.6.26 10.128.6.27)
< CLIENT=(10.128.6.28 10.128.6.29)
---
> GP_NAME=${experiment_name}
> ZONE="us-central1-a"
> TEMPLATE="updated-app-template"
> 
> function exit_handler() {
>         echo "** Trapped CTRL-C, deleting experiment"
> 	exit 1
> }
> 
> trap exit_handler INT
> echo "Create group name"
> echo "${GP_NAME}"
> echo "$((num_nodes_rsm_1+num_nodes_rsm_2+client))"
> echo "${ZONE}"
> echo "${TEMPLATE}"
> 
> # STATIC IP ADDRESSES!!!
> RSM1=(10.128.4.137 10.128.4.138 10.128.4.139 10.128.4.140)
> RSM2=(10.128.4.141 10.128.4.142 10.128.4.143 10.128.4.144)
> CLIENT=(10.128.4.145 10.128.4.146)
> echo "About to parallel!"
148d239
< 
303c394,395
<     # scp network files to expected directory on other machines
---
> 
> 	# scp network files to expected directory on other machines
306,307c398,399
< 	parallel -v --jobs=0 scp -oStrictHostKeyChecking=no -i "${key_file}" ${network_dir}{1} ${username}@{2}:"${exec_dir}" ::: network0urls.txt network1urls.txt ::: "${RSM1[@]:0:$r1_size}"
< 	parallel -v --jobs=0 scp -oStrictHostKeyChecking=no -i "${key_file}" ${network_dir}{1} ${username}@{2}:"${exec_dir}" ::: network0urls.txt network1urls.txt ::: "${RSM2[@]:0:$r2size}"
---
> 	parallel -v --jobs=0 scp -o StrictHostKeyChecking=no -i "${key_file}" ${network_dir}{1} ${username}@{2}:"${exec_dir}" ::: network0urls.txt network1urls.txt ::: "${RSM1[@]:0:$r1_size}"
> 	parallel -v --jobs=0 scp -o StrictHostKeyChecking=no -i "${key_file}" ${network_dir}{1} ${username}@{2}:"${exec_dir}" ::: network0urls.txt network1urls.txt ::: "${RSM2[@]:0:$r2size}"
308a401,457
> 	############# Setup all necessary external applications #############
> 	function start_raft() {
> 		echo "Raft RSM is being used!"
> 		# Take in arguments
> 		local client_ip=$1
> 		local size=$2
> 		local RSM=("${!3}")
> 		etcd_path="${raft_app_dir}etcd-main/"
>     		# Run setup build script
>            	#Client node
>            	ssh -o StrictHostKeyChecking=no -t "${client_ip}" 'cd '"${etcd_path}"' && export PATH=$PATH:/usr/local/go/bin && '"${etcd_path}"'scripts/build.sh'
>            	echo "Sent build information!"
>            	#Server nodes
>            	parallel -v --jobs=0 ssh -o StrictHostKeyChecking=no -t {1} 'pwd && cd '"${etcd_path}"' && pwd && export PATH=$PATH:/usr/local/go/bin && '"${etcd_path}"'scripts/build.sh' ::: "${RSM[@]:0:$((size))}";
> 		# Set constants
> 		etcd_bin_path="${etcd_path}bin"
> 		benchmark_bin_path="${raft_app_dir}bin"
> 		TOKEN=token-77
> 		CLUSTER_STATE=new
> 		count=0
> 		machines=()
> 		urls=()
> 		cluster=()
> 		rsm_w_ports=()
> 		while ((${count} < ${size})); do
> 			echo "RSM: ${RSM[$count]}"
> 			echo "count: ${count}, size: ${size}"
> 			machines+=("machine-$((count + 1))")
> 			urls+=(http://"${RSM[$count]}":2380)
> 			#count=$((count + 1))
> 			cluster+=("machine-$((count + 1))"=http://"${RSM[$count]}":2380)
> 			rsm_w_ports+=("${RSM[$count]}:2379")
> 			count=$((count + 1))
> 		done
> 		# Run the first etcd cluster
> 		printf -v cluster_list '%s,' "${cluster[@]}"
> 		for i in ${!RSM[@]}; do
> 			this_name=${machines[$i]}
> 			this_ip=${RSM[$i]}
> 			this_url=${urls[$i]}
> 			ssh -o StrictHostKeyChecking=no ${RSM[$i]} "export THIS_NAME=${this_name};export THIS_IP=${this_ip}; export TOKEN=${TOKEN};export CLUSTER_STATE=${CLUSTER_STATE};export CLUSTER="${cluster_list%,}";export PATH=\$PATH:${benchmark_bin_path};export PATH=\$PATH:${etcd_bin_path}; cd \$HOME;echo PWD: \$(pwd)  THIS_NAME:\${THIS_NAME} THIS_IP:\${THIS_IP} TOKEN:\${TOKEN} CLUSTER:\${CLUSTER};killall -9 benchmark;sudo fuser -n tcp -k 2379 2380;sudo rm -rf \$HOME/data.etcd;etcd --data-dir=data.etcd --name \${THIS_NAME} --initial-advertise-peer-urls http://\${THIS_IP}:2380 --listen-peer-urls http://\${THIS_IP}:2380 --advertise-client-urls http://\${THIS_IP}:2379 --listen-client-urls http://\${THIS_IP}:2379 --initial-cluster \${CLUSTER} --initial-cluster-state \${CLUSTER_STATE} --initial-cluster-token \${TOKEN} &> background_raft_${this_ip}.log;" &
> 		done
> 		# Sleep to wait for Raft server to start
> 		printf -v joined '%s,' "${rsm_w_ports[@]}"
> 		echo "RSM w ports: ${joined%,}"
> 		echo "######################################################ABOUT TO SLEEP#####################################" 
> 		# Start benchmark
> 		echo "#####################################Running benchmark...#############################################"
>     		export PATH=$PATH:${benchmark_bin_path}
> 		export PATH=$PATH:${etcd_bin_path}
> 		benchmark --help
> 		(benchmark --endpoints="${joined%,}" --conns=100 --clients=1000 put --key-size=8 --sequential-keys --total=1500000 --val-size=256 
> 		benchmark --endpoints="${joined%,}" --conns=100 --clients=1000 put --key-size=8 --sequential-keys --total=1500000 --val-size=256
> 		benchmark --endpoints="${joined%,}" --conns=100 --clients=1000 put --key-size=8 --sequential-keys --total=2000000 --val-size=256) &
> 		echo "DONE WITH FIRST RAFT ITERATION"
> 		exit 1
> 	}
318,321d466
<         echo "###########################################FINISH RUNNING ALGORAND"
<         # Step 1: Copy rerun script onto each machine
<         scp -o StrictHostKeyChecking=no -i "${key_file}" ${algorand_scripts_dir}/scripts/rerun.sh ${username}@${client_ip}:${workdir}
<         parallel -v --jobs=0 scp -o StrictHostKeyChecking=no -i "${key_file}" ${algorand_scripts_dir}/scripts/rerun.sh ${username}@{1}:${workdir} ::: "${RSM[@]:0:$((size))}";
323c468,509
<         # Step 2: Execute rerun script
---
> 		genesis_json=${algorand_scripts_dir}/scripts/genesis.json;
> 		cat $genesis_json
> 		per_node_algos=$((starting_algos / size));
> 		echo $per_node_algos
> 		rm -rf ${algorand_scripts_dir}/genesis_creation
> 		rm -rf ${algorand_scripts_dir}/addresses
> 		mkdir ${algorand_scripts_dir}/genesis_creation/
> 		cp $genesis_json ${algorand_scripts_dir}/genesis_creation/
> 		mkdir ${algorand_scripts_dir}/addresses/
>         #Relay nodes (which also happens to be the client nodes)
> 		ssh -o StrictHostKeyChecking=no -t "${client_ip}" ''"${algorand_scripts_dir}"'/setup_algorand.py '"${algorand_app_dir}"' '"${algorand_scripts_dir}"' '"${algorand_scripts_dir}"'/scripts/relay_config.json '"${per_node_algos}"' '"${client_ip}"''
> 		echo "Sent Relay node information!"
> 		#Participation nodes
> 		parallel -v --jobs=0 ssh -o StrictHostKeyChecking=no -t {1} ''"${algorand_scripts_dir}"'/setup_algorand.py '"${algorand_app_dir}"' '"${algorand_scripts_dir}"' '"${algorand_scripts_dir}"'/scripts/node_config.json '"${per_node_algos}"' '"${client_ip}"'' ::: "${RSM[@]:0:$((size))}";
> 
> 		### Get genesis files ###
> 		parallel -v --jobs=0 scp -o StrictHostKeyChecking=no -i "${key_file}" ${username}@{1}:${algorand_scripts_dir}/{1}_gen.json ${algorand_scripts_dir}/genesis_creation/ ::: "${RSM[@]:0:$((size))}";
> 		# Combine genesis pieces into one file
> 		count=0
> 		while ((count < size)); do
> 			echo $(genesis=$(jq 'select(has("addr"))' ${algorand_scripts_dir}/genesis_creation/${RSM[$count]}_gen.json);jq --argjson genesis "$genesis" '.alloc += [ $genesis ]' ${algorand_scripts_dir}/genesis_creation/genesis.json) > ${algorand_scripts_dir}/genesis_creation/genesis.json
> 			count=$((count + 1))
> 		done
> 		# Copy final genesis files onto all machines
> 		scp -o StrictHostKeyChecking=no -i "${key_file}" ${algorand_scripts_dir}/genesis_creation/genesis.json ${username}@${client_ip}:${algorand_scripts_dir}/node/
> 		parallel -v --jobs=0 scp -o StrictHostKeyChecking=no -i "${key_file}" ${algorand_scripts_dir}/genesis_creation/genesis.json ${username}@{1}:${algorand_scripts_dir}/node/ ::: "${RSM[@]:0:$((size))}";
> 
> 		### Get address matchings ###
> 		parallel -v --jobs=0 scp -o StrictHostKeyChecking=no -i "${key_file}" ${username}@{1}:${algorand_scripts_dir}/{1}_addr.json ${algorand_scripts_dir}/addresses/ ::: "${RSM[@]:0:$((size))}";
> 		# Runn address swap for each machine file
> 		count=0
>         while ((count < size)); do
>             echo "COMMAND: ${algorand_scripts_dir}/addr_swap.py ${algorand_scripts_dir}/addresses ${RSM[$count]} ${RSM[$(((count-1) % size))]} ${RSM[$(((count+1) % size))]}"
> 			${algorand_scripts_dir}/addr_swap.py ${algorand_scripts_dir}/addresses ${RSM[$count]} ${RSM[$(((count-1) % size))]} ${RSM[$(((count+1) % size))]}
> 			count=$((count + 1))
> 		done
> 		# Copy final wallet address files onto all machines
> 		parallel -v --jobs=0 scp -o StrictHostKeyChecking=no -i "${key_file}" ${algorand_scripts_dir}/addresses/{1}_node.json ${username}@{1}:${algorand_app_dir}/wallet_app/node.json ::: "${RSM[@]:0:$((size))}";
> 
> 		### Finish running Algorand
> 		echo "###########################################FINISH RUNNING ALGORAND"
>         #Relay nodes
325c511,513
<         ssh -o StrictHostKeyChecking=no -t "${client_ip}" '/home/scrooge/rerun.sh '"${algorand_app_dir}"' '"${algorand_scripts_dir}"' '"${client_ip}"':4161 default '"${relay}"''
---
> 		ssh -o StrictHostKeyChecking=no -t "${client_ip}" ''"${algorand_scripts_dir}"'/run_relay_algorand.py '"${algorand_app_dir}"' '"${algorand_scripts_dir}"' '"${client_ip}"' '"${relay}"'' &
> 		echo "Relay node is run!"
>         #Participation nodes
327,329c515,539
<         parallel -v --jobs=0 ssh -o StrictHostKeyChecking=no -t {1} '/home/scrooge/rerun.sh '"${algorand_app_dir}"' '"${algorand_scripts_dir}"' '"${client_ip}"':4161 default '"${relay}"''' &' ::: "${RSM[@]:0:$((size))}";
<         echo "Done with the parallel jobs!"        
< echo "###########################################Algorand started and running!"
---
> 		parallel -v --jobs=0 'ssh -o StrictHostKeyChecking=no -t {1} '''"${algorand_scripts_dir}"'/run_algorand.py '"${algorand_app_dir}"' '"${algorand_scripts_dir}"' '"${client_ip}"' '"${relay}"''' &' ::: "${RSM[@]:0:$((size))}";
>         echo "###########################################Algorand started and running!"
> 	}
> 	
> 	function start_resdb() {
> 		echo "ResDB RSM is being used!"
> 		# Take in arguments
> 		local cluster_num=$1
> 		local size=$2
>         local client_ip=$3
> 		local RSM=("${!4}")
> 		# Create a new kv server conf file
> 		rm ${resdb_app_dir}/deploy/config/kv_performance_server.conf
> 		printf "%s\n" "iplist=(" >> ${resdb_app_dir}/deploy/config/kv_performance_server.conf
> 		count=0
> 		while ((${count} < ${size})); do
> 				printf "%s\n" "${RSM[$count]}" >> ${resdb_app_dir}/deploy/config/kv_performance_server.conf
> 				count=$((count + 1))
> 		done
>         printf "%s\n" "${client_ip}" >> ${resdb_app_dir}/deploy/config/kv_performance_server.conf
> 		printf "%s\n\n" ")" >> ${resdb_app_dir}/deploy/config/kv_performance_server.conf
> 		echo "server=//kv_server:kv_server_performance" >> ${resdb_app_dir}/deploy/config/kv_performance_server.conf
> 		echo "HERE IS THE KV CONFIG:"	
> 		cat ${resdb_app_dir}/deploy/config/kv_performance_server.conf		
> 		${resdb_scripts_dir}/scrooge-resdb.sh ${resdb_app_dir} $cluster_num ${resdb_scripts_dir}
331,334d540
<     echo "About to start applications!"
<     start_algorand "${CLIENT[0]}" "$r1_size" "RSM1[@]"
< 	start_algorand "${CLIENT[1]}" "$r1_size" "RSM2[@]"
< 
336c542
<     for algo in "${protocols[@]}"; do # Looping over all the protocols.
---
> 	for algo in "${protocols[@]}"; do # Looping over all the protocols.
353,354c559,595
< 							# Next, we call the script that makes the config.h. We need to pass all the arguments.
<                             echo "WARNING !!!!!THIS IS WRONG YOU NEED THE IF STATEMENT IN THE FOR LOOP!!!!!!! WARNING"
---
>                             # Sending RSM
>                         	if [ "$send_rsm" = "algo" ]; then
>                         		start_algorand "${CLIENT[0]}" "$r1_size" "RSM1[@]"
>                         	elif [ "$send_rsm" = "resdb" ]; then
>                         		echo "ResDB RSM is being used for sending."
>                         		cluster_idx=1
>                         		start_resdb "${cluster_idx}" "${r1_size}" "${CLIENT[0]}" "RSM1[@]"
>                         	elif [ "$send_rsm" = "raft" ]; then
>                         		echo "Raft RSM is being used for sending."
>                         		start_raft "${CLIENT[0]}" "$r1_size" "RSM1[@]"
>                         	elif [ "$send_rsm" = "file" ]; then
>                         		echo "File RSM is being used for sending. No extra setup necessary."
>                         	else
>                         		echo "INVALID RECEIVING RSM."
>                         	fi
>                             # Receiving RSM 
>                             if [ "$receive_rsm" = "algo" ]; then
>                         		echo "Algo RSM is being used for receiving."
>                         		start_algorand "${CLIENT[1]}" "$r1_size" "RSM2[@]"
>                         	elif [ "$receive_rsm" = "resdb" ]; then
>                         		echo "ResDB RSM is being used for receiving."
>                         		cluster_idx=2
>                         		start_resdb "${cluster_idx}" "${r1_size}" "${CLIENT[1]}" "RSM2[@]"
>                         	elif [ "$receive_rsm" = "raft" ]; then
>                         		echo "Raft RSM is being used for receiving."
>                         		start_raft "${CLIENT[1]}" "$r1_size" "RSM2[@]"
>                         	elif [ "$receive_rsm" = "file" ]; then
>                         		echo "File RSM is being used for receiving. No extra setup necessary."
>                         	else
>                         		echo "INVALID RECEIVING RSM."
>                         	fi
>                         	echo "THIS SCRIPT IS EXITING FOR NOW INSTEAD OF RUNNING SCROOGE"
>                         	echo "FEEL FREE TO CHANGE BUT CHECK WHO ELSE IS RUNNING SCROOGE CONCURRENTLY PLEASE!!!!"
>                         	#exit 1
>                         	echo "THIS SCRIPT IS SLEEPING FOR 1 MINUTE ON LINE 589 BEFORE RUNNING SCROOGE - FEEL FREE TO CHANGE"
> 					
>                             # Next, we call the script that makes the config.h. We need to pass all the arguments.
366,367c607,608
< 							parallel -v --jobs=0 scp -oStrictHostKeyChecking=no -i "${key_file}" ${network_dir}{1} ${username}@{2}:"${exec_dir}" ::: network0urls.txt network1urls.txt ::: "${RSM1[@]:0:$r1_size}"
< 							parallel -v --jobs=0 scp -oStrictHostKeyChecking=no -i "${key_file}" ${network_dir}{1} ${username}@{2}:"${exec_dir}" ::: network0urls.txt network1urls.txt ::: "${RSM2[@]:0:$r2size}"
---
> 							parallel -v --jobs=0 scp -o StrictHostKeyChecking=no -i "${key_file}" ${network_dir}{1} ${username}@{2}:"${exec_dir}" ::: network0urls.txt network1urls.txt ::: "${RSM1[@]:0:$r1_size}"
> 							parallel -v --jobs=0 scp -o StrictHostKeyChecking=no -i "${key_file}" ${network_dir}{1} ${username}@{2}:"${exec_dir}" ::: network0urls.txt network1urls.txt ::: "${RSM2[@]:0:$r2size}"
378a620,621
> 
> echo "taking down experiment"
